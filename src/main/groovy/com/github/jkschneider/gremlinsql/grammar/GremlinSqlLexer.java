// Generated from /home/jon/git/gremlin-sql/src/main/antlr4/GremlinSql.g4 by ANTLR 4.2.2
package com.github.jkschneider.gremlinsql.grammar;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class GremlinSqlLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__4=1, T__3=2, T__2=3, T__1=4, T__0=5, K_SELECT=6, K_FROM=7, K_NULL=8, 
		K_CURRENT_DATE=9, K_CURRENT_TIME=10, K_CURRENT_TIMESTAMP=11, K_WHERE=12, 
		K_EQ=13, K_NEQ=14, K_GT=15, K_GTE=16, K_LT=17, K_LTE=18, K_IN=19, K_AND=20, 
		K_OR=21, IDENTIFIER=22, STRING_LITERAL=23, NUMERIC_LITERAL=24, WS=25;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'('", "')'", "'*'", "','", "'.'", "K_SELECT", "K_FROM", "K_NULL", "K_CURRENT_DATE", 
		"K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_WHERE", "K_EQ", "K_NEQ", "'>'", 
		"'>='", "'<'", "'<='", "K_IN", "K_AND", "K_OR", "IDENTIFIER", "STRING_LITERAL", 
		"NUMERIC_LITERAL", "WS"
	};
	public static final String[] ruleNames = {
		"T__4", "T__3", "T__2", "T__1", "T__0", "K_SELECT", "K_FROM", "K_NULL", 
		"K_CURRENT_DATE", "K_CURRENT_TIME", "K_CURRENT_TIMESTAMP", "K_WHERE", 
		"K_EQ", "K_NEQ", "K_GT", "K_GTE", "K_LT", "K_LTE", "K_IN", "K_AND", "K_OR", 
		"IDENTIFIER", "STRING_LITERAL", "NUMERIC_LITERAL", "DIGIT", "A", "B", 
		"C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", 
		"Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "WS"
	};


	public GremlinSqlLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "GremlinSql.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\33\u0170\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n"+
		"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16"+
		"\5\16\u00bc\n\16\3\17\3\17\3\17\3\17\5\17\u00c2\n\17\3\20\3\20\3\21\3"+
		"\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3"+
		"\26\3\26\3\26\3\27\3\27\3\27\3\27\7\27\u00dc\n\27\f\27\16\27\u00df\13"+
		"\27\3\27\3\27\3\27\3\27\3\27\7\27\u00e6\n\27\f\27\16\27\u00e9\13\27\3"+
		"\27\3\27\3\27\7\27\u00ee\n\27\f\27\16\27\u00f1\13\27\3\27\3\27\3\27\7"+
		"\27\u00f6\n\27\f\27\16\27\u00f9\13\27\5\27\u00fb\n\27\3\30\3\30\3\30\3"+
		"\30\7\30\u0101\n\30\f\30\16\30\u0104\13\30\3\30\3\30\3\31\6\31\u0109\n"+
		"\31\r\31\16\31\u010a\3\31\3\31\7\31\u010f\n\31\f\31\16\31\u0112\13\31"+
		"\5\31\u0114\n\31\3\31\3\31\5\31\u0118\n\31\3\31\6\31\u011b\n\31\r\31\16"+
		"\31\u011c\5\31\u011f\n\31\3\31\3\31\6\31\u0123\n\31\r\31\16\31\u0124\3"+
		"\31\3\31\5\31\u0129\n\31\3\31\6\31\u012c\n\31\r\31\16\31\u012d\5\31\u0130"+
		"\n\31\5\31\u0132\n\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36"+
		"\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3"+
		")\3)\3*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62"+
		"\3\63\3\63\3\64\3\64\3\65\6\65\u016b\n\65\r\65\16\65\u016c\3\65\3\65\2"+
		"\2\66\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35"+
		"\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\2\65\2\67\29\2;\2"+
		"=\2?\2A\2C\2E\2G\2I\2K\2M\2O\2Q\2S\2U\2W\2Y\2[\2]\2_\2a\2c\2e\2g\2i\33"+
		"\3\2%\3\2$$\3\2bb\3\2__\5\2C\\aac|\6\2\62;C\\aac|\3\2))\4\2--//\3\2\62"+
		";\4\2CCcc\4\2DDdd\4\2EEee\4\2FFff\4\2GGgg\4\2HHhh\4\2IIii\4\2JJjj\4\2"+
		"KKkk\4\2LLll\4\2MMmm\4\2NNnn\4\2OOoo\4\2PPpp\4\2QQqq\4\2RRrr\4\2SSss\4"+
		"\2TTtt\4\2UUuu\4\2VVvv\4\2WWww\4\2XXxx\4\2YYyy\4\2ZZzz\4\2[[{{\4\2\\\\"+
		"||\5\2\13\f\16\17\"\"\u016d\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3"+
		"\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2"+
		"\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37"+
		"\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3"+
		"\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2i\3\2\2\2\3k\3\2\2\2\5m\3\2"+
		"\2\2\7o\3\2\2\2\tq\3\2\2\2\13s\3\2\2\2\ru\3\2\2\2\17|\3\2\2\2\21\u0081"+
		"\3\2\2\2\23\u0086\3\2\2\2\25\u0093\3\2\2\2\27\u00a0\3\2\2\2\31\u00b2\3"+
		"\2\2\2\33\u00bb\3\2\2\2\35\u00c1\3\2\2\2\37\u00c3\3\2\2\2!\u00c5\3\2\2"+
		"\2#\u00c8\3\2\2\2%\u00ca\3\2\2\2\'\u00cd\3\2\2\2)\u00d0\3\2\2\2+\u00d4"+
		"\3\2\2\2-\u00fa\3\2\2\2/\u00fc\3\2\2\2\61\u0131\3\2\2\2\63\u0133\3\2\2"+
		"\2\65\u0135\3\2\2\2\67\u0137\3\2\2\29\u0139\3\2\2\2;\u013b\3\2\2\2=\u013d"+
		"\3\2\2\2?\u013f\3\2\2\2A\u0141\3\2\2\2C\u0143\3\2\2\2E\u0145\3\2\2\2G"+
		"\u0147\3\2\2\2I\u0149\3\2\2\2K\u014b\3\2\2\2M\u014d\3\2\2\2O\u014f\3\2"+
		"\2\2Q\u0151\3\2\2\2S\u0153\3\2\2\2U\u0155\3\2\2\2W\u0157\3\2\2\2Y\u0159"+
		"\3\2\2\2[\u015b\3\2\2\2]\u015d\3\2\2\2_\u015f\3\2\2\2a\u0161\3\2\2\2c"+
		"\u0163\3\2\2\2e\u0165\3\2\2\2g\u0167\3\2\2\2i\u016a\3\2\2\2kl\7*\2\2l"+
		"\4\3\2\2\2mn\7+\2\2n\6\3\2\2\2op\7,\2\2p\b\3\2\2\2qr\7.\2\2r\n\3\2\2\2"+
		"st\7\60\2\2t\f\3\2\2\2uv\5Y-\2vw\5=\37\2wx\5K&\2xy\5=\37\2yz\59\35\2z"+
		"{\5[.\2{\16\3\2\2\2|}\5? \2}~\5W,\2~\177\5Q)\2\177\u0080\5M\'\2\u0080"+
		"\20\3\2\2\2\u0081\u0082\5O(\2\u0082\u0083\5]/\2\u0083\u0084\5K&\2\u0084"+
		"\u0085\5K&\2\u0085\22\3\2\2\2\u0086\u0087\59\35\2\u0087\u0088\5]/\2\u0088"+
		"\u0089\5W,\2\u0089\u008a\5W,\2\u008a\u008b\5=\37\2\u008b\u008c\5O(\2\u008c"+
		"\u008d\5[.\2\u008d\u008e\7a\2\2\u008e\u008f\5;\36\2\u008f\u0090\5\65\33"+
		"\2\u0090\u0091\5[.\2\u0091\u0092\5=\37\2\u0092\24\3\2\2\2\u0093\u0094"+
		"\59\35\2\u0094\u0095\5]/\2\u0095\u0096\5W,\2\u0096\u0097\5W,\2\u0097\u0098"+
		"\5=\37\2\u0098\u0099\5O(\2\u0099\u009a\5[.\2\u009a\u009b\7a\2\2\u009b"+
		"\u009c\5[.\2\u009c\u009d\5E#\2\u009d\u009e\5M\'\2\u009e\u009f\5=\37\2"+
		"\u009f\26\3\2\2\2\u00a0\u00a1\59\35\2\u00a1\u00a2\5]/\2\u00a2\u00a3\5"+
		"W,\2\u00a3\u00a4\5W,\2\u00a4\u00a5\5=\37\2\u00a5\u00a6\5O(\2\u00a6\u00a7"+
		"\5[.\2\u00a7\u00a8\7a\2\2\u00a8\u00a9\5[.\2\u00a9\u00aa\5E#\2\u00aa\u00ab"+
		"\5M\'\2\u00ab\u00ac\5=\37\2\u00ac\u00ad\5Y-\2\u00ad\u00ae\5[.\2\u00ae"+
		"\u00af\5\65\33\2\u00af\u00b0\5M\'\2\u00b0\u00b1\5S*\2\u00b1\30\3\2\2\2"+
		"\u00b2\u00b3\5a\61\2\u00b3\u00b4\5C\"\2\u00b4\u00b5\5=\37\2\u00b5\u00b6"+
		"\5W,\2\u00b6\u00b7\5=\37\2\u00b7\32\3\2\2\2\u00b8\u00bc\7?\2\2\u00b9\u00ba"+
		"\7?\2\2\u00ba\u00bc\7?\2\2\u00bb\u00b8\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bc"+
		"\34\3\2\2\2\u00bd\u00be\7#\2\2\u00be\u00c2\7?\2\2\u00bf\u00c0\7>\2\2\u00c0"+
		"\u00c2\7@\2\2\u00c1\u00bd\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c2\36\3\2\2\2"+
		"\u00c3\u00c4\7@\2\2\u00c4 \3\2\2\2\u00c5\u00c6\7@\2\2\u00c6\u00c7\7?\2"+
		"\2\u00c7\"\3\2\2\2\u00c8\u00c9\7>\2\2\u00c9$\3\2\2\2\u00ca\u00cb\7>\2"+
		"\2\u00cb\u00cc\7?\2\2\u00cc&\3\2\2\2\u00cd\u00ce\5E#\2\u00ce\u00cf\5O"+
		"(\2\u00cf(\3\2\2\2\u00d0\u00d1\5\65\33\2\u00d1\u00d2\5O(\2\u00d2\u00d3"+
		"\5;\36\2\u00d3*\3\2\2\2\u00d4\u00d5\5Q)\2\u00d5\u00d6\5W,\2\u00d6,\3\2"+
		"\2\2\u00d7\u00dd\7$\2\2\u00d8\u00dc\n\2\2\2\u00d9\u00da\7$\2\2\u00da\u00dc"+
		"\7$\2\2\u00db\u00d8\3\2\2\2\u00db\u00d9\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd"+
		"\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e0\3\2\2\2\u00df\u00dd\3\2"+
		"\2\2\u00e0\u00fb\7$\2\2\u00e1\u00e7\7b\2\2\u00e2\u00e6\n\3\2\2\u00e3\u00e4"+
		"\7b\2\2\u00e4\u00e6\7b\2\2\u00e5\u00e2\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e6"+
		"\u00e9\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00ea\3\2"+
		"\2\2\u00e9\u00e7\3\2\2\2\u00ea\u00fb\7b\2\2\u00eb\u00ef\7]\2\2\u00ec\u00ee"+
		"\n\4\2\2\u00ed\u00ec\3\2\2\2\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef"+
		"\u00f0\3\2\2\2\u00f0\u00f2\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00fb\7_"+
		"\2\2\u00f3\u00f7\t\5\2\2\u00f4\u00f6\t\6\2\2\u00f5\u00f4\3\2\2\2\u00f6"+
		"\u00f9\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00fb\3\2"+
		"\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00d7\3\2\2\2\u00fa\u00e1\3\2\2\2\u00fa"+
		"\u00eb\3\2\2\2\u00fa\u00f3\3\2\2\2\u00fb.\3\2\2\2\u00fc\u0102\7)\2\2\u00fd"+
		"\u0101\n\7\2\2\u00fe\u00ff\7)\2\2\u00ff\u0101\7)\2\2\u0100\u00fd\3\2\2"+
		"\2\u0100\u00fe\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100\3\2\2\2\u0102\u0103"+
		"\3\2\2\2\u0103\u0105\3\2\2\2\u0104\u0102\3\2\2\2\u0105\u0106\7)\2\2\u0106"+
		"\60\3\2\2\2\u0107\u0109\5\63\32\2\u0108\u0107\3\2\2\2\u0109\u010a\3\2"+
		"\2\2\u010a\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u0113\3\2\2\2\u010c"+
		"\u0110\7\60\2\2\u010d\u010f\5\63\32\2\u010e\u010d\3\2\2\2\u010f\u0112"+
		"\3\2\2\2\u0110\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0114\3\2\2\2\u0112"+
		"\u0110\3\2\2\2\u0113\u010c\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u011e\3\2"+
		"\2\2\u0115\u0117\5=\37\2\u0116\u0118\t\b\2\2\u0117\u0116\3\2\2\2\u0117"+
		"\u0118\3\2\2\2\u0118\u011a\3\2\2\2\u0119\u011b\5\63\32\2\u011a\u0119\3"+
		"\2\2\2\u011b\u011c\3\2\2\2\u011c\u011a\3\2\2\2\u011c\u011d\3\2\2\2\u011d"+
		"\u011f\3\2\2\2\u011e\u0115\3\2\2\2\u011e\u011f\3\2\2\2\u011f\u0132\3\2"+
		"\2\2\u0120\u0122\7\60\2\2\u0121\u0123\5\63\32\2\u0122\u0121\3\2\2\2\u0123"+
		"\u0124\3\2\2\2\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u012f\3\2"+
		"\2\2\u0126\u0128\5=\37\2\u0127\u0129\t\b\2\2\u0128\u0127\3\2\2\2\u0128"+
		"\u0129\3\2\2\2\u0129\u012b\3\2\2\2\u012a\u012c\5\63\32\2\u012b\u012a\3"+
		"\2\2\2\u012c\u012d\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e"+
		"\u0130\3\2\2\2\u012f\u0126\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0132\3\2"+
		"\2\2\u0131\u0108\3\2\2\2\u0131\u0120\3\2\2\2\u0132\62\3\2\2\2\u0133\u0134"+
		"\t\t\2\2\u0134\64\3\2\2\2\u0135\u0136\t\n\2\2\u0136\66\3\2\2\2\u0137\u0138"+
		"\t\13\2\2\u01388\3\2\2\2\u0139\u013a\t\f\2\2\u013a:\3\2\2\2\u013b\u013c"+
		"\t\r\2\2\u013c<\3\2\2\2\u013d\u013e\t\16\2\2\u013e>\3\2\2\2\u013f\u0140"+
		"\t\17\2\2\u0140@\3\2\2\2\u0141\u0142\t\20\2\2\u0142B\3\2\2\2\u0143\u0144"+
		"\t\21\2\2\u0144D\3\2\2\2\u0145\u0146\t\22\2\2\u0146F\3\2\2\2\u0147\u0148"+
		"\t\23\2\2\u0148H\3\2\2\2\u0149\u014a\t\24\2\2\u014aJ\3\2\2\2\u014b\u014c"+
		"\t\25\2\2\u014cL\3\2\2\2\u014d\u014e\t\26\2\2\u014eN\3\2\2\2\u014f\u0150"+
		"\t\27\2\2\u0150P\3\2\2\2\u0151\u0152\t\30\2\2\u0152R\3\2\2\2\u0153\u0154"+
		"\t\31\2\2\u0154T\3\2\2\2\u0155\u0156\t\32\2\2\u0156V\3\2\2\2\u0157\u0158"+
		"\t\33\2\2\u0158X\3\2\2\2\u0159\u015a\t\34\2\2\u015aZ\3\2\2\2\u015b\u015c"+
		"\t\35\2\2\u015c\\\3\2\2\2\u015d\u015e\t\36\2\2\u015e^\3\2\2\2\u015f\u0160"+
		"\t\37\2\2\u0160`\3\2\2\2\u0161\u0162\t \2\2\u0162b\3\2\2\2\u0163\u0164"+
		"\t!\2\2\u0164d\3\2\2\2\u0165\u0166\t\"\2\2\u0166f\3\2\2\2\u0167\u0168"+
		"\t#\2\2\u0168h\3\2\2\2\u0169\u016b\t$\2\2\u016a\u0169\3\2\2\2\u016b\u016c"+
		"\3\2\2\2\u016c\u016a\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016e\3\2\2\2\u016e"+
		"\u016f\b\65\2\2\u016fj\3\2\2\2\32\2\u00bb\u00c1\u00db\u00dd\u00e5\u00e7"+
		"\u00ef\u00f7\u00fa\u0100\u0102\u010a\u0110\u0113\u0117\u011c\u011e\u0124"+
		"\u0128\u012d\u012f\u0131\u016c\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}