package com.github.jkschneider.gremlinsql.jdbc

import com.tinkerpop.blueprints.Graph
import com.tinkerpop.blueprints.TransactionalGraph

import java.sql.Array
import java.sql.Blob
import java.sql.CallableStatement
import java.sql.Clob
import java.sql.Connection
import java.sql.DatabaseMetaData
import java.sql.NClob
import java.sql.PreparedStatement
import java.sql.SQLClientInfoException
import java.sql.SQLException
import java.sql.SQLWarning
import java.sql.SQLXML
import java.sql.Savepoint
import java.sql.Statement
import java.sql.Struct
import java.util.concurrent.Executor

class GremlinConnection implements Connection {
    private final String doesNotSupportPrefix = "Gremlin JDBC driver does not support "
    private boolean autoCommit
    private Graph g

    public GremlinConnection(Graph g) {
        this.g = g
    }

    @Override
    Statement createStatement() throws SQLException {
    }

    @Override
    PreparedStatement prepareStatement(String sql) throws SQLException {
        return null
    }

    @Override
    Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return null
    }

    @Override
    PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return null
    }

    @Override
    Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return null
    }

    @Override
    PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return null
    }

    @Override
    PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return null
    }

    @Override
    PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return null
    }

    @Override
    PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return null
    }


    @Override
    CallableStatement prepareCall(String sql) throws SQLException {
        throw new SQLException(doesNotSupportPrefix + "prepareCall")
    }

    @Override
    String nativeSQL(String sql) throws SQLException {
        return null
    }

    @Override
    void setAutoCommit(boolean autoCommit) {
        this.autoCommit = autoCommit
    }

    @Override
    boolean getAutoCommit() {
        return autoCommit
    }

    @Override
    void commit() {
        if(g instanceof TransactionalGraph)
            ((TransactionalGraph) g).commit()
    }

    @Override
    void rollback() {
        if(g instanceof TransactionalGraph)
            ((TransactionalGraph) g).rollback()
    }

    @Override
    void close() {
        // does not mean anything to a Tinkerpop graph
    }

    @Override
    boolean isClosed() throws SQLException {
        return false
    }

    @Override
    DatabaseMetaData getMetaData() throws SQLException {
        // TODO implement me
        return null
    }

    @Override
    void setReadOnly(boolean readOnly) throws SQLException {
        throw new SQLException("Only supported on graph creation")
    }

    @Override
    boolean isReadOnly() {
        return false
    }

    @Override
    void setCatalog(String catalog) {
    }

    @Override
    String getCatalog() {
        return null
    }

    @Override
    void setTransactionIsolation(int level) throws SQLException {
    }

    @Override
    int getTransactionIsolation() throws SQLException {
        return 0
    }

    @Override
    SQLWarning getWarnings() throws SQLException {
        return null
    }

    @Override
    void clearWarnings() throws SQLException {
    }

    @Override
    CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        throw new SQLException(doesNotSupportPrefix + "prepareCall")
    }

    @Override
    Map<String, Class<?>> getTypeMap() throws SQLException {
        return null
    }

    @Override
    void setTypeMap(Map<String, Class<?>> map) throws SQLException {
    }

    @Override
    void setHoldability(int holdability) throws SQLException {
    }

    @Override
    int getHoldability() throws SQLException {
        return 0
    }

    @Override
    Savepoint setSavepoint() throws SQLException {
        throw new SQLException(doesNotSupportPrefix + "setSavepoint")
    }

    @Override
    Savepoint setSavepoint(String name) throws SQLException {
        throw new SQLException(doesNotSupportPrefix + "setSavepoint")
    }

    @Override
    void rollback(Savepoint savepoint) throws SQLException {
        throw new SQLException(doesNotSupportPrefix + "rollback")
    }

    @Override
    void releaseSavepoint(Savepoint savepoint) throws SQLException {
        throw new SQLException(doesNotSupportPrefix + "releaseSavepoint")
    }

    @Override
    CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return null
    }

    @Override
    Clob createClob() throws SQLException {
        return null
    }

    @Override
    Blob createBlob() throws SQLException {
        return null
    }

    @Override
    NClob createNClob() throws SQLException {
        return null
    }

    @Override
    SQLXML createSQLXML() throws SQLException {
        return null
    }

    @Override
    boolean isValid(int timeout) throws SQLException {
        return false
    }

    @Override
    void setClientInfo(String name, String value) throws SQLClientInfoException {

    }

    @Override
    void setClientInfo(Properties properties) throws SQLClientInfoException {

    }

    @Override
    String getClientInfo(String name) throws SQLException {
        return null
    }

    @Override
    Properties getClientInfo() throws SQLException {
        return null
    }

    @Override
    Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return null
    }

    @Override
    Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return null
    }

    @Override
    void setSchema(String schema) throws SQLException {

    }

    @Override
    String getSchema() throws SQLException {
        return null
    }

    @Override
    void abort(Executor executor) throws SQLException {

    }

    @Override
    void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {

    }

    @Override
    int getNetworkTimeout() throws SQLException {
        return 0
    }

    @Override
    def <T> T unwrap(Class<T> iface) throws SQLException {
        return null
    }

    @Override
    boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false
    }
}
